% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_soft_duplicates.R
\name{check_soft_duplicates}
\alias{check_soft_duplicates}
\title{Checks for survey similarities - Soft Duplicates}
\usage{
check_soft_duplicates(
  dataset,
  kobo_survey,
  uuid_column = "uuid",
  idnk_value = "idnk",
  sm_separator = ".",
  log_name = "soft_duplicate_log",
  threshold = 7,
  return_all_results = FALSE
)
}
\arguments{
\item{dataset}{dataset to be check as a dataframe or a list with the dataframe stored as "checked_dataset"
stored as "checked_dataset"}

\item{kobo_survey}{Kobo survey sheet.}

\item{uuid_column}{uuid column in the dataset. Default is "uuid".}

\item{idnk_value}{String character for the value of the "I don't know" value}

\item{sm_separator}{Separator for choice multiple questions. The default is "."}

\item{log_name}{Name of the log dataframe flagged in the end of the function}

\item{threshold}{flag all entries less or equal a specified threshold. The default is 7.}

\item{return_all_results}{By default, the function will return only the values that are under the
threshold. Default is FALSE.}
}
\value{
return a list with the dataset checked stored as checked_dataset and
a dataframe with the soft duplicate log
}
\description{
Checks for survey similarities - Soft Duplicates
}
\examples{
soft_duplicates <- check_soft_duplicates(
  dataset = cleaningtools_raw_data,
  kobo_survey = cleaningtools_survey,
  uuid_column = "X_uuid",
  idnk_value = "dont_know",
  sm_separator = ".",
  log_name = "soft_duplicate_log",
  threshold = 7
)

group_by_enum_raw_data <- cleaningtools_raw_data \%>\%
  dplyr::group_by(enumerator_num)

soft_per_enum <- group_by_enum_raw_data \%>\%
  dplyr::group_split() \%>\%
  purrr::map(~ check_soft_duplicates(
    dataset = .,
    kobo_survey = cleaningtools_survey,
    uuid_column = "X_uuid", idnk_value = "dont_know",
    sm_separator = ".",
    log_name = "soft_duplicate_log",
    threshold = 7,
    return_all_results = TRUE
  ))
soft_per_enum \%>\%
  purrr::map(~ .[["soft_duplicate_log"]]) \%>\%
  purrr::map2(
    .y = dplyr::group_keys(group_by_enum_raw_data) \%>\% unlist(),
    ~ dplyr::mutate(.x, enum = .y)
  ) \%>\%
  do.call(dplyr::bind_rows, .)
}
